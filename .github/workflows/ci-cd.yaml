# Setup is Based off yarl
name: CI/CD

on:
  push:
    branches:
    - master
    - >-
      [0-9].[0-9]+
    tags:
    - v*
  pull_request:
    branches:
    - master
    - >-
      [0-9].[0-9]+
  schedule:
  - cron: 0 6 * * *  # Daily 6AM UTC build



jobs:
  test-winloop:
    name: Compile Winloop
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Install Requirements
      run: python -m pip install --upgrade setuptools wheel pip cython
    
    - name: Compile Winloop
      run: python setup.py build_ext --inplace
    
    - name: run-tests
      run: python -m tests
      

  # build_wheels: 
  #   name: Build wheels 
  #   runs-on: windows-latest
        
  #   steps: 
  #     - uses: actions/checkout@v3 
  #       with:
  #         fetch-depth: 50
  #         submodules: true      

  #     - uses: actions/setup-python@v4 
  #       with: 
  #         python-version: "3.x"
  
  #     - name: Install cibuildwheel 
  #       run: pip install cibuildwheel -qq 
      
  #     - name: Build wheels 
  #       run: python -m cibuildwheel --output-dir wheelhouse 
  #       env: 
  #         CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*"
  #         CIBW_SKIP: "pp* *-win_arm64 *-win32"

  #     - uses: actions/upload-artifact@v4
  #       with: 
  #         name: dist
  #         path: ./wheelhouse/*.whl 
  
  
  # build_sdist:
  #   name: Build source distribution
  #   runs-on: windows-latest
    
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 50
  #         submodules: true      
      
  #     - uses: actions/setup-python@v4 
  #       with: 
  #         python-version: "3.x"
          
  #     - name: Install Setuptools 
  #       run: python -m pip install --upgrade setuptools wheel pip cython
        
  #     - name: Build sdist
  #       run: python setup.py sdist

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: dist
  #         path: ./dist/*
  # build_wheels: 
  #   name: Build wheels 
  #   runs-on: windows-latest
        
  #   steps: 
  #     - uses: actions/checkout@v3 
  #       with:
  #         fetch-depth: 50
  #         submodules: true      

  #     - uses: actions/setup-python@v4 
  #       with: 
  #         python-version: "3.x"
  
  #     - name: Install cibuildwheel 
  #       run: pip install cibuildwheel -qq 
      
      
  #     - name: Build wheels 
  #       run: python -m cibuildwheel --output-dir wheelhouse 
  #       env: 
  #         CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*"
  #         CIBW_SKIP: "pp* *-win_arm64 *-win32"

  #     - uses: actions/upload-artifact@v4
  #       with: 
  #         name: dist
  #         path: ./wheelhouse/*.whl 
  
  
  # build_sdist:
  #   name: Build source distribution
  #   runs-on: windows-latest
    
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 50
  #         submodules: true      
      
  #     - uses: actions/setup-python@v4 
  #       with: 
  #         python-version: "3.x"
          
  #     - name: Install Setuptools 
  #       run: python -m pip install --upgrade setuptools wheel pip cython
        
  #     - name: Build sdist
  #       run: python setup.py sdist

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: dist
  #         path: ./dist/*

 

  # upload_pypi:
  #   needs: [build_wheels, build_sdist]
  #   runs-on: ubuntu-latest

  #   # I chose this repo's setup/workflow because it was the best Resource I could find for an implementation - Vizonex
  #   # See: https://github.com/hoffstadt/DearPyGui/blob/master/.github/workflows/Deployment.yml#L165 
    
  #   steps:

  #   - name: Checkout
  #     uses: actions/checkout@v3
    
  #   - name: Download artifacts
  #     uses: actions/download-artifact@v3
    
  #   - name: Publish package
  #     uses: pypa/gh-action-pypi-publish@v1.8.5
  #     with:
  #       verbose: true
  #       user: __token__
  #       password: ${{ secrets.PYPI_PASSWORD }}
